{\rtf1\ansi\ansicpg1252\cocoartf2757
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red195\green123\blue90;\red23\green23\blue26;\red174\green176\blue183;
\red103\green107\blue114;\red38\green157\blue169;\red89\green158\blue96;\red117\green114\blue185;}
{\*\expandedcolortbl;;\csgenericrgb\c76471\c48235\c35294;\csgenericrgb\c9020\c9020\c10196;\csgenericrgb\c68235\c69020\c71765;
\csgenericrgb\c40392\c41961\c44706;\csgenericrgb\c14902\c61569\c66275;\csgenericrgb\c34902\c61961\c37647;\csgenericrgb\c45882\c44706\c72549;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \cb3 import \cf4 os\
\cf2 import \cf4 pandas \cf2 as \cf4 pd\
\cf2 import \cf4 numpy \cf2 as \cf4 np\
\cf2 from \cf4 scipy.stats \cf2 import \cf4 norm\
\
\cf5 # Set the variables\
\cf4 rfr = \cf6 0.05\
\cf4 div = \cf6 0\
\
\
\cf5 # Find the Risk-Free-Rate\
    # STEP 1: TimeToExpiration = Subtract the data date from the expiration date\
        # FOR EACH ROW OF DATA\
        # ADD TO BASE PROGRAM/TABLE\
    # STEP 2: AvgTTE Find the average TimeToExpiration\
        # Weighted Average of every TTE in the specific calculation for each ticker.\
        # MAKE SURE IT IS FOR THAT SPECIFIC TICKER\
    # STEP 3: Find the closest AvgTTE to the risk free rate given on Treasury.gov\
        # Find out how to only pull info from Treasury.gov for one time after the average Time to Expiration is found\
        # DON'T ACCIDENTALLY DDOS TREASURY.GOV!!!!\
\
# Set Pandas display options\
\cf4 pd.set_option(\cf7 'display.max_columns'\cf4 , \cf2 None\cf4 )  \cf5 # Show all columns\
\cf4 pd.set_option(\cf7 'display.width'\cf4 , \cf6 1000\cf4 )  \cf5 # Set a wider display width\
\cf4 pd.set_option(\cf7 'display.max_rows'\cf4 , \cf6 20\cf4 )  \cf5 # Show top 20 rows\
\
# Prompt the user to enter a ticker\
\cf4 ticker = \cf8 input\cf4 (\cf7 "Enter the ticker: "\cf4 )\
\
\cf5 # Find all CSV files in the specified folder\
\cf4 folder_path = \cf7 "/Users/nathankibbe/Desktop/Delta Nuetral CSVs"\
\cf4 csv_files = [file \cf2 for \cf4 file \cf2 in \cf4 os.listdir(folder_path) \cf2 if \cf4 file.endswith(\cf7 ".csv"\cf4 )]\
\
\cf5 # Loop through each CSV file in the folder\
\cf2 for \cf4 csv_file \cf2 in \cf4 csv_files:\
    \cf5 # Read the CSV file and select desired columns\
    \cf4 file_path = os.path.join(folder_path, csv_file)\
    df = pd.read_csv(file_path, usecols=[\cf7 'UnderlyingSymbol'\cf4 , \cf7 'UnderlyingPrice'\cf4 , \cf7 'OptionSymbol'\cf4 ,\
                                         \cf7 'Type'\cf4 , \cf7 'Expiration'\cf4 , \cf7 'DataDate'\cf4 , \cf7 'Strike'\cf4 , \cf7 'OpenInterest'\cf4 ,\
                                         \cf7 'IV'\cf4 ], encoding=\cf7 'utf-8'\cf4 )\
\
    \cf5 # Rename columns\
    \cf4 df.rename(columns=\{\cf7 'UnderlyingSymbol'\cf4 : \cf7 'Ticker'\cf4 , \cf7 'UnderlyingPrice'\cf4 : \cf7 'Close Price'\cf4 \}, inplace=\cf2 True\cf4 )\
\
    \cf5 # Convert 'Expiration' and 'DataDate' columns to datetime objects\
    \cf4 df[\cf7 'Expiration'\cf4 ] = pd.to_datetime(df[\cf7 'Expiration'\cf4 ])\
    df[\cf7 'DataDate'\cf4 ] = pd.to_datetime(df[\cf7 'DataDate'\cf4 ])\
\
    \cf5 # Calculate the variable 't'\
    \cf4 df[\cf7 't'\cf4 ] = (df[\cf7 'Expiration'\cf4 ] - df[\cf7 'DataDate'\cf4 ]).dt.days / \cf6 252\
\
    \cf5 # Determine if it's a call or put based on the 'Type' column\
    \cf4 df[\cf7 'OptionType'\cf4 ] = np.where(df[\cf7 'Type'\cf4 ] == \cf7 'call'\cf4 , \cf7 'call'\cf4 , \cf7 'put'\cf4 )\
\
    \cf5 # Create OptionSymbolRoot column\
    \cf4 df[\cf7 'OptionSymbolRoot'\cf4 ] = df[\cf7 'OptionSymbol'\cf4 ].str[:-\cf6 9\cf4 ]\
\
    \cf5 # Group the DataFrame by the option symbol root and count the number of unique option types\
    \cf4 pairing_counts = df.groupby(\cf7 'OptionSymbolRoot'\cf4 )[\cf7 'OptionType'\cf4 ].nunique()\
\
    \cf5 # Filter the DataFrame to include only the option symbol roots that have both call and put option types\
    \cf4 valid_option_symbol_roots = pairing_counts[pairing_counts == \cf6 2\cf4 ].index\
    filtered_df = df[df[\cf7 'OptionSymbolRoot'\cf4 ].isin(valid_option_symbol_roots)].copy()\
\
    \cf5 # Calculate d1 for each option pair\
    \cf4 filtered_df.loc[:, \cf7 'd1'\cf4 ] = (np.log(filtered_df[\cf7 'Close Price'\cf4 ] / filtered_df[\cf7 'Strike'\cf4 ]) + (rfr - div + \cf6 0.5 \cf4 * (filtered_df[\cf7 'IV'\cf4 ] ** \cf6 2\cf4 )) * filtered_df[\cf7 't'\cf4 ]) / (\
            filtered_df[\cf7 'IV'\cf4 ] * np.sqrt(filtered_df[\cf7 't'\cf4 ]))\
\
    \cf5 # Calculate Nd1 for each option pair\
    \cf4 filtered_df.loc[:, \cf7 'Nd1'\cf4 ] = norm.cdf(filtered_df[\cf7 'd1'\cf4 ])\
\
    \cf5 # Calculate Call delta for call options\
    \cf4 filtered_df.loc[filtered_df[\cf7 'OptionType'\cf4 ] == \cf7 'call'\cf4 , \cf7 'Call Delta'\cf4 ] = np.exp(-div * filtered_df[\cf7 't'\cf4 ]) * filtered_df.loc[\
        filtered_df[\cf7 'OptionType'\cf4 ] == \cf7 'call'\cf4 , \cf7 'Nd1'\cf4 ]\
\
    \cf5 # Calculate Put delta for put options\
    \cf4 filtered_df.loc[filtered_df[\cf7 'OptionType'\cf4 ] == \cf7 'put'\cf4 , \cf7 'Put Delta'\cf4 ] = np.exp(-div * filtered_df[\cf7 't'\cf4 ]) * filtered_df.loc[\
        filtered_df[\cf7 'OptionType'\cf4 ] == \cf7 'put'\cf4 , \cf7 'Nd1'\cf4 ] - \cf6 1\
\
    \cf5 # Remove all call or put designations of the Option Symbols\
    \cf4 filtered_df.loc[:, \cf7 'OptionSymbol'\cf4 ] = filtered_df[\cf7 'OptionSymbol'\cf4 ].str[:-\cf6 9\cf4 ] + filtered_df[\cf7 'OptionSymbol'\cf4 ].str[-\cf6 8\cf4 :]\
\
    \cf5 # Calculate the sum of Call and Put delta for each option pair\
    \cf4 filtered_df.loc[:, \cf7 'Step Y'\cf4 ] = np.where(filtered_df[\cf7 'OptionSymbol'\cf4 ].duplicated(keep=\cf2 False\cf4 ), filtered_df[\cf7 'Call Delta'\cf4 ].fillna(\cf6 0\cf4 ) + filtered_df[\cf7 'Put Delta'\cf4 ].fillna(\cf6 0\cf4 ), np.nan)\
\
    \cf5 # Calculate the big sum\
    \cf4 big_sum = filtered_df[\cf7 'Step Y'\cf4 ].sum()\
\
    \cf5 # Filter the dataframe based on the entered ticker\
    \cf4 filtered_df = filtered_df[filtered_df[\cf7 'Ticker'\cf4 ] == ticker]\
\
    \cf5 # Find the theoretical close price that makes big_sum equal to zero\
    \cf4 singular_close_price = filtered_df[\cf7 'Close Price'\cf4 ].iloc[\cf6 0\cf4 ]\
    \cf2 while \cf4 big_sum > \cf6 0\cf4 :\
        singular_close_price -= \cf6 0.01\
        \cf4 filtered_df.loc[:, \cf7 'd1'\cf4 ] = (np.log(singular_close_price / filtered_df[\cf7 'Strike'\cf4 ]) + (rfr - div + \cf6 0.5 \cf4 * (filtered_df[\cf7 'IV'\cf4 ] ** \cf6 2\cf4 )) * filtered_df[\cf7 't'\cf4 ]) / (\
                filtered_df[\cf7 'IV'\cf4 ] * np.sqrt(filtered_df[\cf7 't'\cf4 ]))\
        filtered_df.loc[:, \cf7 'Nd1'\cf4 ] = norm.cdf(filtered_df[\cf7 'd1'\cf4 ])\
        filtered_df.loc[filtered_df[\cf7 'OptionType'\cf4 ] == \cf7 'call'\cf4 , \cf7 'Call Delta'\cf4 ] = np.exp(-div * filtered_df[\cf7 't'\cf4 ]) * filtered_df.loc[\
            filtered_df[\cf7 'OptionType'\cf4 ] == \cf7 'call'\cf4 , \cf7 'Nd1'\cf4 ]\
        filtered_df.loc[filtered_df[\cf7 'OptionType'\cf4 ] == \cf7 'put'\cf4 , \cf7 'Put Delta'\cf4 ] = np.exp(-div * filtered_df[\cf7 't'\cf4 ]) * filtered_df.loc[\
            filtered_df[\cf7 'OptionType'\cf4 ] == \cf7 'put'\cf4 , \cf7 'Nd1'\cf4 ] - \cf6 1\
        \cf4 filtered_df.loc[:, \cf7 'Step Y'\cf4 ] = np.where(filtered_df[\cf7 'OptionSymbol'\cf4 ].duplicated(keep=\cf2 False\cf4 ), filtered_df[\cf7 'Call Delta'\cf4 ].fillna(\cf6 0\cf4 ) + filtered_df[\cf7 'Put Delta'\cf4 ].fillna(\cf6 0\cf4 ), np.nan)\
        big_sum = filtered_df[\cf7 'Step Y'\cf4 ].sum()\
\
\
    \cf5 # Format the singular_close_price as dollar representation with two decimal places\
    \cf4 singular_close_price = \cf7 "$\{:,.2f\}"\cf4 .format(singular_close_price)\
\
    \cf5 # Print the name of the current CSV file being processed\
    # print(f"CSV file: \{csv_file\}")\
\
    # Print the relevant information for this CSV\
    \cf4 print(\cf7 f"Close price: \cf2 \{\cf4 filtered_df[\cf7 'Close Price'\cf4 ].iloc[\cf6 0\cf4 ]\cf2 \}\cf7 , Singular close price: \cf2 \{\cf4 singular_close_price\cf2 \}\cf7 , Datadate: \cf2 \{\cf4 filtered_df[\cf7 'DataDate'\cf4 ].iloc[\cf6 0\cf4 ]\cf2 \}\cf7 "\cf4 )\
\
}